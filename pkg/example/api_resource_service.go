/*
 * Service
 *
 * API service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package example

import (
	"context"
	"net/http"
	"errors"
)

// ResourceAPIService is a service that implements the logic for the ResourceAPIServicer
// This service should implement the business logic for every endpoint for the ResourceAPI API.
// Include any external packages or services that will be required by this service.
type ResourceAPIService struct {
}

// NewResourceAPIService creates a default api service
func NewResourceAPIService() ResourceAPIServicer {
	return &ResourceAPIService{}
}

// Create - Create a resource
func (s *ResourceAPIService) Create(ctx context.Context) (ImplResponse, error) {
	// TODO - update Create with the required logic for this service method.
	// Add api_resource_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Resource{}) or use other options such as http.Ok ...
	// return Response(200, Resource{}), nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("Create method not implemented")
}

// Delete - Delete a resource
func (s *ResourceAPIService) Delete(ctx context.Context, id string) (ImplResponse, error) {
	// TODO - update Delete with the required logic for this service method.
	// Add api_resource_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Resource{}) or use other options such as http.Ok ...
	// return Response(200, Resource{}), nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("Delete method not implemented")
}
